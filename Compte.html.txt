    /* suite CSS du panier & footer */
    #cartTotal {
      font-weight: 900;
      font-size: 1.3rem;
      color: #3c2870;
      margin-top: 1rem;
      text-align: right;
    }
    #cartActions {
      display: flex;
      justify-content: space-between;
      margin-top: 1.5rem;
    }
    #cartActions button {
      padding: 0.6rem 1.2rem;
      font-weight: 700;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.3s;
      font-size: 1rem;
      color: white;
    }
    #btnCheckout {
      background-color: #7a56d1;
    }
    #btnCheckout:hover {
      background-color: #5a4099;
    }
    #btnCloseCart {
      background-color: #ccc;
      color: #333;
    }
    #btnCloseCart:hover {
      background-color: #aaa;
      color: #111;
    }

    footer {
      text-align: center;
      padding: 1rem 0;
      font-size: 0.9rem;
      color: #7a56d1;
    }

  </style>
</head>
<body>

<header>
  <div class="menu-wrapper">
    <button id="menuBtn" aria-haspopup="true" aria-expanded="false">Menu</button>
    <nav class="menu-list" id="menuList" aria-label="Cat√©gories" hidden>
      <ul>
        <li><button class="category-btn active" data-category="all">Toutes</button></li>
        <li><button class="category-btn" data-category="espoir">Lueur d‚ÄôEspoir</button></li>
        <li><button class="category-btn" data-category="amour">Lueur d‚ÄôAmour</button></li>
        <li><button class="category-btn" data-category="serenite">Lueur de S√©r√©nit√©</button></li>
        <li><button class="category-btn" data-category="confiance">Lueur de Confiance</button></li>
        <li><button class="category-btn" data-category="guerison">Lueur de Gu√©rison</button></li>
        <li><button class="category-btn" data-category="intuition">Lueur d‚ÄôIntuition</button></li>
        <li><button class="category-btn" data-category="inspiration">Lueur d‚ÄôInspiration</button></li>
        <li><button class="category-btn" data-category="ame">Lueur d‚Äô√Çme</button></li>
      </ul>
    </nav>
  </div>

  <div class="brand-name">Lueurs d'√Çmes</div>

  <div class="header-icons">
    <div class="search-wrapper">
      <span id="searchIcon" title="Recherche üîç">üîç</span>
      <input type="search" id="searchInput" placeholder="Rechercher une bougie..." aria-label="Recherche" />
    </div>
    <a href="compte.html" title="Mon Compte" class="icon user" aria-label="Compte utilisateur">üë§</a>
    <button class="icon cart" id="cartBtn" aria-label="Voir le panier" data-count="0">üõí</button>
  </div>
</header>

<main>
  <div id="productsGrid" aria-live="polite"></div>
</main>

<!-- MODAL PANIER -->
<div id="cartModal" role="dialog" aria-modal="true" aria-labelledby="cartTitle" tabindex="-1">
  <div id="cartContent">
    <h2 id="cartTitle">Votre Panier</h2>
    <div id="cartItems"></div>
    <div id="cartTotal">Total: 0 ‚Ç¨</div>
    <div id="cartActions">
      <button id="btnCheckout">Payer</button>
      <button id="btnCloseCart">Fermer</button>
    </div>
  </div>
</div>

<script>
  // DATA PRODUITS
  const products = [
    {
      id: "espoir",
      name: "Lueur d‚ÄôEspoir",
      description: "Une bougie pour les moments de doute, offrant une lumi√®re int√©rieure et un message d'encouragement.",
      price: 20,
      category: "espoir",
      parfum: "Notes d'agrumes et de menthe poivr√©e",
    },
    {
      id: "amour",
      name: "Lueur d‚ÄôAmour",
      description: "Destin√©e √† raviver les relations, cette bougie diffuse une √©nergie chaleureuse et un message d'affection.",
      price: 22,
      category: "amour",
      parfum: "Rose et vanille",
    },
    {
      id: "serenite",
      name: "Lueur de S√©r√©nit√©",
      description: "Parfaite pour les instants de m√©ditation, elle apporte calme et √©quilibre, accompagn√©e d'un message apaisant.",
      price: 21,
      category: "serenite",
      parfum: "Lavande et bois de santal",
    },
    {
      id: "confiance",
      name: "Lueur de Confiance",
      description: "Pour renforcer la confiance en soi, cette bougie inspire courage et d√©termination, avec un message motivant.",
      price: 23,
      category: "confiance",
      parfum: "Bois de c√®dre et musc",
    },
    {
      id: "guerison",
      name: "Lueur de Gu√©rison",
      description: "Id√©ale pour les p√©riodes de transition, elle offre un message de gu√©rison et de renouveau.",
      price: 20,
      category: "guerison",
      parfum: "Camomille et eucalyptus",
    },
    {
      id: "intuition",
      name: "Lueur d‚ÄôIntuition",
      description: "Encourage l'√©coute de son intuition, avec un message guidant vers la sagesse int√©rieure.",
      price: 24,
      category: "intuition",
      parfum: "Patchouli et jasmin",
    },
    {
      id: "inspiration",
      name: "Lueur d‚ÄôInspiration",
      description: "Pour stimuler la cr√©ativit√©, cette bougie diffuse une √©nergie inspirante et un message de d√©couverte.",
      price: 22,
      category: "inspiration",
      parfum: "Fleur d'oranger et ylang-ylang",
    },
    {
      id: "ame",
      name: "Lueur d‚Äô√Çme",
      description: "La bougie phare, offrant un message profond et spirituel, invitant √† la r√©flexion personnelle.",
      price: 25,
      category: "ame",
      parfum: "Encens et myrrhe",
    },
  ];

  // Variables √©tat
  let filteredCategory = "all";
  let cart = {}; // id -> quantity
  let searchTerm = "";

  // ELEMENTS
  const menuBtn = document.getElementById("menuBtn");
  const menuList = document.getElementById("menuList");
  const productsGrid = document.getElementById("productsGrid");
  const cartBtn = document.getElementById("cartBtn");
  const cartModal = document.getElementById("cartModal");
  const cartItems = document.getElementById("cartItems");
  const cartTotal = document.getElementById("cartTotal");
  const btnCloseCart = document.getElementById("btnCloseCart");
  const btnCheckout = document.getElementById("btnCheckout");
  const searchIcon = document.getElementById("searchIcon");
  const searchInput = document.getElementById("searchInput");

  // Affiche ou cache le menu des cat√©gories
  menuBtn.addEventListener("click", () => {
    const expanded = menuBtn.getAttribute("aria-expanded") === "true";
    menuBtn.setAttribute("aria-expanded", !expanded);
    if (menuList.hasAttribute("hidden")) {
      menuList.removeAttribute("hidden");
    } else {
      menuList.setAttribute("hidden", "");
    }
  });

  // S√©lection cat√©gorie
  menuList.querySelectorAll(".category-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      filteredCategory = btn.dataset.category;
      // Activer le bouton s√©lectionn√©
      menuList.querySelectorAll(".category-btn").forEach(b => b.classList.remove("active"));
      btn.classList.add("active");
      renderProducts();
      menuList.setAttribute("hidden", "");
      menuBtn.setAttribute("aria-expanded", false);
    });
  });

  // Affichage des produits filtr√©s
  function renderProducts() {
    // Filtre par cat√©gorie et recherche
    let filtered = products.filter(p => 
      (filteredCategory === "all" || p.category === filteredCategory) &&
      (p.name.toLowerCase().includes(searchTerm) || p.description.toLowerCase().includes(searchTerm))
    );

    if(filtered.length === 0) {
      productsGrid.innerHTML = "<p>Aucun produit trouv√©.</p>";
      return;
    }

    productsGrid.innerHTML = filtered.map(p => `
      <article class="product-card" aria-label="${p.name}">
        <h3 class="product-name">${p.name}</h3>
        <p class="product-description">${p.description}<br><small><em>Parfum : ${p.parfum}</em></small></p>
        <div class="product-price">${p.price.toFixed(2)} ‚Ç¨</div>
        <div class="quantity-wrapper">
          <label for="qty-${p.id}">Quantit√©:</label>
          <input type="number" id="qty-${p.id}" min="1" max="10" value="1" aria-label="Quantit√© pour ${p.name}" />
        </div>
        <button class="add-to-cart-btn" data-id="${p.id}">Ajouter au panier</button>
      </article>
    `).join("");

    // Ajout √©couteur boutons panier
    productsGrid.querySelectorAll(".add-to-cart-btn").forEach(btn => {
      btn.addEventListener("click", () => {
        const id = btn.dataset.id;
        const qtyInput = document.getElementById("qty-" + id);
        let qty = parseInt(qtyInput.value);
        if (isNaN(qty) || qty < 1) qty = 1;
        addToCart(id, qty);
      });
    });
  }

  // Ajouter au panier
  function addToCart(id, qty) {
    if (cart[id]) {
      cart[id] += qty;
    } else {
      cart[id] = qty;
    }
    updateCartCount();
    alert("Ajout√© au panier !");
  }

  // Mise √† jour affichage nombre articles panier
  function updateCartCount() {
    const totalCount = Object.values(cart).reduce((a,b) => a + b, 0);
    cartBtn.setAttribute("data-count", totalCount);
  }

  // Afficher panier modal
  cartBtn.addEventListener("click", () => {
    renderCart();
    cartModal.classList.add("active");
    cartModal.focus();
  });

  btnCloseCart.addEventListener("click", () => {
    cartModal.classList.remove("active");
  });

  // Fermer modal avec Esc
  window.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && cartModal.classList.contains("active")) {
      cartModal.classList.remove("active");
    }
  });

  // Rendu contenu panier
  function renderCart() {
    if (Object.keys(cart).length === 0) {
      cartItems.innerHTML = "<p>Votre panier est vide.</p>";
      cartTotal.textContent = "Total: 0 ‚Ç¨";
      btnCheckout.disabled = true;
      return;
    }
    btnCheckout.disabled = false;
    cartItems.innerHTML = "";
    let total = 0;

    for (const id in cart) {
      const product = products.find(p => p.id === id);
      const quantity = cart[id];
      const linePrice = product.price * quantity;
      total += linePrice;

      const itemDiv = document.createElement("div");
      itemDiv.className = "cart-item";

      itemDiv.innerHTML = `
        <div class="cart-item-name">${product.name}</div>
        <div class="cart-item-qty">
          <label for="cartQty-${id}" class="sr-only">Quantit√©</label>
          <input type="number" id="cartQty-${id}" min="1" max="10" value="${quantity}" aria-label="Quantit√© pour ${product.name}" />
          <button aria-label="Supprimer ${product.name}" class="remove-item-btn" title="Supprimer cet article">‚úñ</button>
        </div>
        <div class="cart-item-price">${linePrice.toFixed(2)} ‚Ç¨</div>
      `;
      cartItems.appendChild(itemDiv);

      // Ecouteur changement quantit√©
      const qtyInput = itemDiv.querySelector("input[type='number']");
      qtyInput.addEventListener("change", () => {
        let val = parseInt(qtyInput.value);
        if (isNaN(val) || val < 1) val = 1;
        if (val > 10) val = 10;
        qtyInput.value = val;
        cart[id] = val;
        renderCart();
        updateCartCount();
      });

      // Ecouteur suppression article
      const removeBtn = itemDiv.querySelector(".remove-item-btn");
      removeBtn.addEventListener("click", () => {
        delete cart[id];
        renderCart();
        updateCartCount();
      });
    }

    cartTotal.textContent = `Total: ${total.toFixed(2)} ‚Ç¨`;
  }

  // Checkout simul√©
  btnCheckout.addEventListener("click", () => {
    if (Object.keys(cart).length === 0) return;

    // Simple formulaire simul√©
    const confirmation = confirm(`Vous allez payer ${cartTotal.textContent.replace("Total: ", "")}. Confirmez-vous ?`);
    if (confirmation) {
      alert("Paiement effectu√© avec succ√®s ! Merci pour votre achat.");
      cart = {};
      updateCartCount();
      cartModal.classList.remove("active");
    }
  });

  // Recherche togglable
  searchIcon.addEventListener("click", () => {
    if (searchInput.classList.contains("visible")) {
      searchInput.value = "";
      searchTerm = "";
      searchInput.classList.remove("visible");
      renderProducts();
    } else {
      searchInput.classList.add("visible");
      searchInput.focus();
    }
  });

  // Recherche en temps r√©el
  searchInput.addEventListener("input", () => {
    searchTerm = searchInput.value.trim().toLowerCase();
    renderProducts();
  });

  // Initial render
  renderProducts();
  updateCartCount();

  // Close menu if clicked outside
  document.addEventListener("click", (e) => {
    if (!menuBtn.contains(e.target) && !menuList.contains(e.target)) {
      menuList.setAttribute("hidden", "");
      menuBtn.setAttribute("aria-expanded", false);
    }
  });
</script>

<footer>
  &copy; 2025 Lueurs d'√Çmes. Tous droits r√©serv√©s.
</footer>

</body>
</html>
